/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NotDeadGuyInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bulkAddWalletsToPreSaleWhitelist(address[],uint8[],uint8[])": FunctionFragment;
    "buyFromMarket(uint256)": FunctionFragment;
    "claimFreeSketchesAtPresale(uint16)": FunctionFragment;
    "claimPresaleSketchesAtPresale(uint16)": FunctionFragment;
    "claimSketchesAtPublicSale(uint16)": FunctionFragment;
    "claimTokens(uint16)": FunctionFragment;
    "closeMarket()": FunctionFragment;
    "finishPreSale()": FunctionFragment;
    "finishPublicSale()": FunctionFragment;
    "finishTokenConverting()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "myPresaleSlot()": FunctionFragment;
    "name()": FunctionFragment;
    "openMarket()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "progresses()": FunctionFragment;
    "removeWalletFromPreSaleWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeAddWalletToPreSaleWhitelist(address,uint8,uint8)": FunctionFragment;
    "safeMint(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sendRewardsTo(address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMarketPrice(uint256,uint256)": FunctionFragment;
    "splitMarketShares()": FunctionFragment;
    "splitShares()": FunctionFragment;
    "startPreSale()": FunctionFragment;
    "startPublicSale()": FunctionFragment;
    "startTokenConverting()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSketchCount()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsafeAddWalletToPreSaleWhitelist(address,uint8,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bulkAddWalletsToPreSaleWhitelist",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFromMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFreeSketchesAtPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPresaleSketchesAtPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSketchesAtPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishPreSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishTokenConverting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "myPresaleSlot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "progresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWalletFromPreSaleWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeAddWalletToPreSaleWhitelist",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "safeMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRewardsTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitMarketShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "splitShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPreSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTokenConverting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSketchCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeAddWalletToPreSaleWhitelist",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkAddWalletsToPreSaleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFreeSketchesAtPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPresaleSketchesAtPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSketchesAtPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishPreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishTokenConverting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myPresaleSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "progresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWalletFromPreSaleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAddWalletToPreSaleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRewardsTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitMarketShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTokenConverting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSketchCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeAddWalletToPreSaleWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConvertingFinished()": EventFragment;
    "ConvertingStarted()": EventFragment;
    "FreeSketchesTaken(address,uint16,uint16)": EventFragment;
    "MarketPaused()": EventFragment;
    "MarketPriceChanged(uint256,uint256)": EventFragment;
    "MarketResumed()": EventFragment;
    "MarketSale(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NftsMinted(address,uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PresaleFinished()": EventFragment;
    "PresaleStarted()": EventFragment;
    "PublicSaleFinished()": EventFragment;
    "PublicSaleStarted()": EventFragment;
    "RewardsSentTo(address,uint256)": EventFragment;
    "SketchesTaken(address,uint16,uint16)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpsertToWhitelist(address,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertingFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertingStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreeSketchesTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftsMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresaleFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresaleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSaleFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSaleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsSentTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SketchesTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpsertToWhitelist"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ConvertingFinishedEvent = TypedEvent<[], {}>;

export type ConvertingFinishedEventFilter =
  TypedEventFilter<ConvertingFinishedEvent>;

export type ConvertingStartedEvent = TypedEvent<[], {}>;

export type ConvertingStartedEventFilter =
  TypedEventFilter<ConvertingStartedEvent>;

export type FreeSketchesTakenEvent = TypedEvent<
  [string, number, number],
  { to: string; sketchCount: number; total: number }
>;

export type FreeSketchesTakenEventFilter =
  TypedEventFilter<FreeSketchesTakenEvent>;

export type MarketPausedEvent = TypedEvent<[], {}>;

export type MarketPausedEventFilter = TypedEventFilter<MarketPausedEvent>;

export type MarketPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { nftId: BigNumber; newPrice: BigNumber }
>;

export type MarketPriceChangedEventFilter =
  TypedEventFilter<MarketPriceChangedEvent>;

export type MarketResumedEvent = TypedEvent<[], {}>;

export type MarketResumedEventFilter = TypedEventFilter<MarketResumedEvent>;

export type MarketSaleEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    from: string;
    to: string;
    nftId: BigNumber;
    price: BigNumber;
    shareCuts: BigNumber;
    holderCut: BigNumber;
  }
>;

export type MarketSaleEventFilter = TypedEventFilter<MarketSaleEvent>;

export type NftsMintedEvent = TypedEvent<
  [string, BigNumber[]],
  { to: string; nftIds: BigNumber[] }
>;

export type NftsMintedEventFilter = TypedEventFilter<NftsMintedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PresaleFinishedEvent = TypedEvent<[], {}>;

export type PresaleFinishedEventFilter = TypedEventFilter<PresaleFinishedEvent>;

export type PresaleStartedEvent = TypedEvent<[], {}>;

export type PresaleStartedEventFilter = TypedEventFilter<PresaleStartedEvent>;

export type PublicSaleFinishedEvent = TypedEvent<[], {}>;

export type PublicSaleFinishedEventFilter =
  TypedEventFilter<PublicSaleFinishedEvent>;

export type PublicSaleStartedEvent = TypedEvent<[], {}>;

export type PublicSaleStartedEventFilter =
  TypedEventFilter<PublicSaleStartedEvent>;

export type RewardsSentToEvent = TypedEvent<
  [string, BigNumber],
  { walletAddress: string; amount: BigNumber }
>;

export type RewardsSentToEventFilter = TypedEventFilter<RewardsSentToEvent>;

export type SketchesTakenEvent = TypedEvent<
  [string, number, number],
  { to: string; sketchCount: number; total: number }
>;

export type SketchesTakenEventFilter = TypedEventFilter<SketchesTakenEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UpsertToWhitelistEvent = TypedEvent<
  [string, number, number],
  { walletAddress: string; saleSlots: number; freeMintSlots: number }
>;

export type UpsertToWhitelistEventFilter =
  TypedEventFilter<UpsertToWhitelistEvent>;

export interface NotDeadGuy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NotDeadGuyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bulkAddWalletsToPreSaleWhitelist(
      walletAddresses: string[],
      saleSlotsOfWallets: BigNumberish[],
      freeMintSlotsOfWallets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFromMarket(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFreeSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPresaleSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSketchesAtPublicSale(
      howMany: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      howMany: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeMarket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishTokenConverting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    myPresaleSlot(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        freeMintSlots: number;
        usedFreeMintSlots: number;
        saleSlots: number;
        usedSaleSlots: number;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    openMarket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    progresses(
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number] & {
        isMarketOpenForTrading: boolean;
        preSaleState: number;
        publicSaleState: number;
        tokenConvertState: number;
      }
    >;

    removeWalletFromPreSaleWhitelist(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeMint(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendRewardsTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketPrice(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitMarketShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTokenConverting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSketchCount(overrides?: CallOverrides): Promise<[number]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsafeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bulkAddWalletsToPreSaleWhitelist(
    walletAddresses: string[],
    saleSlotsOfWallets: BigNumberish[],
    freeMintSlotsOfWallets: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFromMarket(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFreeSketchesAtPresale(
    howMany: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPresaleSketchesAtPresale(
    howMany: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSketchesAtPublicSale(
    howMany: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    howMany: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeMarket(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishPreSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishPublicSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishTokenConverting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  myPresaleSlot(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      freeMintSlots: number;
      usedFreeMintSlots: number;
      saleSlots: number;
      usedSaleSlots: number;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  openMarket(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  progresses(
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, number] & {
      isMarketOpenForTrading: boolean;
      preSaleState: number;
      publicSaleState: number;
      tokenConvertState: number;
    }
  >;

  removeWalletFromPreSaleWhitelist(
    walletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeAddWalletToPreSaleWhitelist(
    walletAddress: string,
    saleSlots: BigNumberish,
    freeMintSlots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeMint(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendRewardsTo(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketPrice(
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitMarketShares(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitShares(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startPreSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startPublicSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTokenConverting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSketchCount(overrides?: CallOverrides): Promise<number>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsafeAddWalletToPreSaleWhitelist(
    walletAddress: string,
    saleSlots: BigNumberish,
    freeMintSlots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkAddWalletsToPreSaleWhitelist(
      walletAddresses: string[],
      saleSlotsOfWallets: BigNumberish[],
      freeMintSlotsOfWallets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[number, number] & { succeeded: number; failed: number }>;

    buyFromMarket(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFreeSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    claimPresaleSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    claimSketchesAtPublicSale(
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    claimTokens(
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    closeMarket(overrides?: CallOverrides): Promise<void>;

    finishPreSale(overrides?: CallOverrides): Promise<void>;

    finishPublicSale(overrides?: CallOverrides): Promise<void>;

    finishTokenConverting(overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    myPresaleSlot(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        freeMintSlots: number;
        usedFreeMintSlots: number;
        saleSlots: number;
        usedSaleSlots: number;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    openMarket(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    progresses(
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number] & {
        isMarketOpenForTrading: boolean;
        preSaleState: number;
        publicSaleState: number;
        tokenConvertState: number;
      }
    >;

    removeWalletFromPreSaleWhitelist(
      walletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeMint(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRewardsTo(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketPrice(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    splitMarketShares(overrides?: CallOverrides): Promise<void>;

    splitShares(overrides?: CallOverrides): Promise<void>;

    startPreSale(overrides?: CallOverrides): Promise<void>;

    startPublicSale(overrides?: CallOverrides): Promise<void>;

    startTokenConverting(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSketchCount(overrides?: CallOverrides): Promise<number>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsafeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ConvertingFinished()"(): ConvertingFinishedEventFilter;
    ConvertingFinished(): ConvertingFinishedEventFilter;

    "ConvertingStarted()"(): ConvertingStartedEventFilter;
    ConvertingStarted(): ConvertingStartedEventFilter;

    "FreeSketchesTaken(address,uint16,uint16)"(
      to?: null,
      sketchCount?: null,
      total?: null
    ): FreeSketchesTakenEventFilter;
    FreeSketchesTaken(
      to?: null,
      sketchCount?: null,
      total?: null
    ): FreeSketchesTakenEventFilter;

    "MarketPaused()"(): MarketPausedEventFilter;
    MarketPaused(): MarketPausedEventFilter;

    "MarketPriceChanged(uint256,uint256)"(
      nftId?: null,
      newPrice?: null
    ): MarketPriceChangedEventFilter;
    MarketPriceChanged(
      nftId?: null,
      newPrice?: null
    ): MarketPriceChangedEventFilter;

    "MarketResumed()"(): MarketResumedEventFilter;
    MarketResumed(): MarketResumedEventFilter;

    "MarketSale(address,address,uint256,uint256,uint256,uint256)"(
      from?: null,
      to?: null,
      nftId?: null,
      price?: null,
      shareCuts?: null,
      holderCut?: null
    ): MarketSaleEventFilter;
    MarketSale(
      from?: null,
      to?: null,
      nftId?: null,
      price?: null,
      shareCuts?: null,
      holderCut?: null
    ): MarketSaleEventFilter;

    "NftsMinted(address,uint256[])"(
      to?: null,
      nftIds?: null
    ): NftsMintedEventFilter;
    NftsMinted(to?: null, nftIds?: null): NftsMintedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PresaleFinished()"(): PresaleFinishedEventFilter;
    PresaleFinished(): PresaleFinishedEventFilter;

    "PresaleStarted()"(): PresaleStartedEventFilter;
    PresaleStarted(): PresaleStartedEventFilter;

    "PublicSaleFinished()"(): PublicSaleFinishedEventFilter;
    PublicSaleFinished(): PublicSaleFinishedEventFilter;

    "PublicSaleStarted()"(): PublicSaleStartedEventFilter;
    PublicSaleStarted(): PublicSaleStartedEventFilter;

    "RewardsSentTo(address,uint256)"(
      walletAddress?: null,
      amount?: null
    ): RewardsSentToEventFilter;
    RewardsSentTo(
      walletAddress?: null,
      amount?: null
    ): RewardsSentToEventFilter;

    "SketchesTaken(address,uint16,uint16)"(
      to?: null,
      sketchCount?: null,
      total?: null
    ): SketchesTakenEventFilter;
    SketchesTaken(
      to?: null,
      sketchCount?: null,
      total?: null
    ): SketchesTakenEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "UpsertToWhitelist(address,uint8,uint8)"(
      walletAddress?: null,
      saleSlots?: null,
      freeMintSlots?: null
    ): UpsertToWhitelistEventFilter;
    UpsertToWhitelist(
      walletAddress?: null,
      saleSlots?: null,
      freeMintSlots?: null
    ): UpsertToWhitelistEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkAddWalletsToPreSaleWhitelist(
      walletAddresses: string[],
      saleSlotsOfWallets: BigNumberish[],
      freeMintSlotsOfWallets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFromMarket(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFreeSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPresaleSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSketchesAtPublicSale(
      howMany: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokens(
      howMany: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeMarket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishTokenConverting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myPresaleSlot(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openMarket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    progresses(overrides?: CallOverrides): Promise<BigNumber>;

    removeWalletFromPreSaleWhitelist(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeMint(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendRewardsTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketPrice(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitMarketShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTokenConverting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSketchCount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsafeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkAddWalletsToPreSaleWhitelist(
      walletAddresses: string[],
      saleSlotsOfWallets: BigNumberish[],
      freeMintSlotsOfWallets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFromMarket(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFreeSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPresaleSketchesAtPresale(
      howMany: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSketchesAtPublicSale(
      howMany: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      howMany: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeMarket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishTokenConverting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myPresaleSlot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openMarket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    progresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWalletFromPreSaleWhitelist(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeMint(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendRewardsTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPrice(
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitMarketShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startPreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTokenConverting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSketchCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsafeAddWalletToPreSaleWhitelist(
      walletAddress: string,
      saleSlots: BigNumberish,
      freeMintSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
